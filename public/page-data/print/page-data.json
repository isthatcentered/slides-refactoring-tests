{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"36542163-dbc6-5a4f-9866-0327a2965f87","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = base;\nvar splitCodeSampleProps = {\n  themes: [vsDark, base]\n};\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notes = makeShortcode(\"Notes\");\nvar layoutProps = {\n  theme: theme,\n  splitCodeSampleProps: splitCodeSampleProps,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Readable tests\"), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Clean code\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83D\\uDEC0\\uD83D\\uDCDD\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tous les jours importance clean code\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Our code\",\n    mdxType: \"EmojiSlide\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"\\uD83E\\uDD31\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", {\n    key: \"1\"\n  }, \"\\uD83E\\uDD0F\"), mdx(\"li\", {\n    key: \"2\"\n  }, \"\\uD83D\\uDC76\"), mdx(\"li\", {\n    key: \"3\"\n  }, \"\\uD83C\\uDF39\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prendre soin code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"M\\xE9thodes courtes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Renommer encore methodes, class, variable \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jusqu''\\xE0 ce que \\xE7a se lise comme po\\xE9sie\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Et puis pourtants fichiers test:\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<Signup/>\\\", async () => {\\n    const navigateSpy = jest.fn()\\n    ;(useNavigate as jest.Mock<typeof useNavigate>).mockImplementation(\\n        () => navigateSpy,\\n    )\\n    ;((User.createUser as any) as jest.MockInstance<\\n        ReturnType<typeof User.createUser>,\\n        any\\n    >).mockResolvedValue(null as any)\\n    ;((SocialLogin as any) as jest.MockInstance<\\n        ReturnType<typeof SocialLogin>,\\n        any\\n    >).mockImplementation(() => null)\\n    \\n    const page = render(<Signin />)\\n    \\n    const submitButton = page.getByRole(\\\"button\\\", {\\n        name: /signin/i,\\n    }) as HTMLButtonElement\\n    \\n    fireEvent.click(submitButton)\\n    \\n    expect(() => page.getByText(/Login & password required/i)).not.toThrow()\\n    \\n    const email = page.getByLabelText(/email/i)\\n    fireEvent.change(email, { target: { value: \\\"john@gmail.com\\\" } })\\n    \\n    const password = page.getByLabelText(/password/i)\\n    fireEvent.change(password, { target: { value: \\\"helloworld\\\" } })\\n    \\n    fireEvent.click(submitButton)\\n    \\n    expect(() => page.getByText(/Loading/i)).not.toThrow()\\n    expect(submitButton.disabled).toBe(true)\\n    \\n    expect(User.createUser).toHaveBeenCalledWith({\\n        email: \\\"john@gmail.com\\\",\\n        password: \\\"helloworld\\\",\\n    })\\n    \\n    await tick()\\n    \\n    expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n    \\n    expect(SocialLogin).toHaveBeenLastCalledWith(\\n        {\\n            loginEnpointRootUrl: API_BASE_URL,\\n        } as PropsType<typeof SocialLogin>,\\n        {},\\n    )\\n\\n    // ... more\\n})\\n\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"I quit\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Moment ou souvient 18h, piscine, time to go home\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Refactoring tests\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"But why though ?\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"J'ai des tests c'et pas suffisant ?\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Tests are a runnable specification\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\\uD83D\\uDCDA\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tests = spec executable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source de v\\xE9rit\\xE9:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comment chaque ecran app doit se comporter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"comment chaque edge case doit \\xEAtre g\\xE9r\\xE9\"))), mdx(\"hr\", null), mdx(TestsVsDevKnowledgeTable, {\n    dev: \"\\uD83E\\uDDE9\",\n    tests: \"\\uD83D\\uDCDA\",\n    result: \"\\uD83D\\uDE00\",\n    mdxType: \"TestsVsDevKnowledgeTable\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lors ajout feature/refactor \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Permet concentrer / feature only\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test watches for you\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"= Avance + vite\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"= + features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"= - bugs\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Probl\\xE8me arrive quand deadline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Par d\\xE9faut Test = premier truc \\xE0 sauter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Donc refactor bc Si dur \\xE0 aborder, tchao direct\"))), mdx(\"hr\", null), mdx(TestsVsDevKnowledgeTable, {\n    dev: \"\\uD83E\\uDDE9\\uD83D\\uDCD5\",\n    tests: \"\\uD83D\\uDCD7\\uD83D\\uDCD8\",\n    result: \"\\uD83D\\uDE10\",\n    mdxType: \"TestsVsDevKnowledgeTable\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"test en moins = pi\\xE8ce en plus\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cas erreur feature + cas erreur test supprim\\xE9\"))), mdx(\"hr\", null), mdx(TestsVsDevKnowledgeTable, {\n    dev: \"\\uD83E\\uDDE9\\uD83D\\uDCD5\\uD83D\\uDCD7\",\n    tests: \"\\uD83D\\uDCD8\",\n    result: \"\\uD83D\\uDE13\",\n    mdxType: \"TestsVsDevKnowledgeTable\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Et \\xE0 chaque test en moins doit garder + en + en m\\xE9moire \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tendence invers\\xE9e + en t\\xEAte que ds tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 pas arri\\xE8res pour 1 en avant\"))), mdx(\"hr\", null), mdx(TestsVsDevKnowledgeTable, {\n    dev: \"\\uD83E\\uDDE9\\uD83D\\uDCDA\",\n    tests: \"\",\n    result: \"\\uD83E\\uDD2F\",\n    mdxType: \"TestsVsDevKnowledgeTable\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jusque moment ou tendance compl\\xE8tement invers\\xE9e\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A chaque changement doit tout v\\xE9rifier \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"impossible toute app en t\\xEAte \"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    mdxType: \"EmojiSlide\"\n  }, mdx(\"span\", null, \"\\uD83D\\uDCC8\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"span\", null, \"\\uD83D\\uDE24\"), mdx(\"span\", null, \"\\uD83D\\uDCB8\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can't keep all that in mind\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"So bugs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"frutrated users\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lost money\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    mdxType: \"EmojiSlide\"\n  }, mdx(\"span\", null, \"\\uD83D\\uDC43\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"span\", null, \"\\u2192 \\uD83D\\uDC77\\u200D\\u2642\\uFE0F\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"but aujourd'hui: \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identifier smells qui font test difficile maintenir\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Voir pistes pour faire mieux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"combo smell -> refactor\"))), mdx(\"hr\", null), mdx(\"p\", null, \"// logo JS\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aptable \\xE0 n'importe quel language\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Probleme -> piste possible pour le r\\xE9soudre\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Donc important = principe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"La fa\\xE7on dont fait et juste une piste possible\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Structural smells\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83C\\uDFD7\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Structure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Veut contribution facile sous pression\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Impossible si chaque test r\\xE9invente la roue (naming, organisation, strategie)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Voyage h\\xE9ros (HP, Roi lien, Matrix, Seigneur anneaux)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"D\\xE9tails diff\\xE9rents mais structure est la m\\xEAme\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Est-ce qu'on peut faire pareil\")))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Unfocused test\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83D\\uDD7A\\u2705\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test qui part dans tous les sens\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  type(email, \\\"credentials.email\\\")\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  const password = page.getByLabel(/password/i)\\n  type(password, \\\"credentials.password\\\")\\n  const submitButton = page.getByLabel(/submit/i)\\n  click(submitButton)\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,11 showNumbers\",\n    \"6,11\": true,\n    \"showNumbers\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5,8,10 showNumbers\",\n    \"5,8,10\": true,\n    \"showNumbers\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:4,7,9\",\n    \"2:4,7,9\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:6\",\n    \"showNumbers\": true,\n    \"2:6\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  const password = page.getByLabel(/password/i)\\n  const submitButton = page.getByLabel(/submit/i)\\n  type(email, \\\"credentials.email\\\")\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  type(password, \\\"credentials.password\\\")\\n  click(submitButton)\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 7:9\",\n    \"showNumbers\": true,\n    \"7:9\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  const password = page.getByLabel(/password/i)\\n  const submitButton = page.getByLabel(/submit/i)\\n  type(email, \\\"credentials.email\\\")\\n  type(password, \\\"credentials.password\\\")\\n  click(submitButton)\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 6 10:11\",\n    \"showNumbers\": true,\n    \"10:11\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  const password = page.getByLabel(/password/i)\\n  const submitButton = page.getByLabel(/submit/i)\\n  type(email, \\\"credentials.email\\\")\\n  type(password, \\\"credentials.password\\\")\\n  click(submitButton)\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 2:6 subtitle=\\\"Arrange\\\"\",\n    \"showNumbers\": true,\n    \"2:6\": true,\n    \"subtitle\": \"\\\"Arrange\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 7:9 subtitle=\\\"Act\\\"\",\n    \"showNumbers\": true,\n    \"7:9\": true,\n    \"subtitle\": \"\\\"Act\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 10:11 subtitle=\\\"Assert\\\"\",\n    \"showNumbers\": true,\n    \"10:11\": true,\n    \"subtitle\": \"\\\"Assert\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 2:6 subtitle=\\\"Given\\\"\",\n    \"showNumbers\": true,\n    \"2:6\": true,\n    \"subtitle\": \"\\\"Given\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 7:9 subtitle=\\\"When\\\"\",\n    \"showNumbers\": true,\n    \"7:9\": true,\n    \"subtitle\": \"\\\"When\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 10:11 subtitle=\\\"Then\\\"\",\n    \"showNumbers\": true,\n    \"10:11\": true,\n    \"subtitle\": \"\\\"Then\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 1:14\",\n    \"showNumbers\": true,\n    \"1:14\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  const password = page.getByLabel(/password/i)\\n  const submitButton = page.getByLabel(/submit/i)\\n\\n  type(email, \\\"credentials.email\\\")\\n  type(password, \\\"credentials.password\\\")\\n  click(submitButton)\\n\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"12\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 2:6,8:10,13\",\n    \"showNumbers\": true,\n    \"2:6,8:10,13\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers  3,6,12\",\n    \"showNumbers\": true,\n    \"\": true,\n    \"3,6,12\": true\n  }), \"\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"V\\xE9rifie redirig\\xE9 vers page d'accueil quand on se log\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Qu'est-ce qui fait test compliqu\\xE9 ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fouilli \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quand test fail, et besoin + infos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"check assertions -> actions -> arrange\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ici, sont cach\\xE9es, M\\xE9lange: \", \"[setup][actions]\", \"[v\\xE9rification]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"En gros, dur \\xE0 suivre\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comment rendre plus clair ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Grouper par type  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add spaces\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SIGNAL: 2 AAA\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Arrange, Act, Assert \"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AAA\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers subtitle=\\\"Before\\\"\",\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"Before\\\"\"\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  type(email, \\\"credentials.email\\\")\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  const password = page.getByLabel(/password/i)\\n  type(password, \\\"credentials.password\\\")\\n  const submitButton = page.getByLabel(/submit/i)\\n  click(submitButton)\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers subtitle='After'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'After'\"\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  const navigateSpy = spyOn(navigate)\\n  const page = render(<LoginPage/>)\\n  const email = page.getByLabel(/email/i)\\n  const password = page.getByLabel(/password/i)\\n  const submitButton = page.getByLabel(/submit/i)\\n\\n  type(email, \\\"credentials.email\\\")\\n  type(password, \\\"credentials.password\\\")\\n  click(submitButton)\\n\\n  expect(page.getByLabel(/submit/i)).not.ToBeInDom()\\n  expect(navigateSpy).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Si failure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Peux localiser rapidement assertions et remonter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pas besoin de chercher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accessoirement, spaces = fais mois peur \"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Junk drawer (\\uD83D\\uDDD1\\uD83D\\uDDC4)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fourre tout\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  // ...\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n  // verify can't submit if empty form\\n\\n  // verify email validation\\n  \\n  // Verify password validation\\n    \\n  // verify loading state\\n    \\n  // verify login fail displays error\\n    \\n  // verify login fail redirect error\\n\\n  // more stuff\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1[6:39]\",\n    \"1[6:39]\": true\n  }), \"test(\\\"method -> condition -> behavior\\\", ()=>{})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1[6:18]\",\n    \"1[6:18]\": true\n  }), \"test(\\\"<LoginPage/> -> condition -> behavior\\\", ()=>{})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1[23:35]\",\n    \"1[23:35]\": true\n  }), \"test(\\\"<LoginPage/> -> failed login -> behavior\\\", ()=>{})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1[39:60]\",\n    \"1[39:60]\": true\n  }), \"test(\\\"<LoginPage/> -> failed login -> displays server error\\\", ()=>{})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1[7:54]\",\n    \"1[7:54]\": true\n  }), \"test(\\\"<LoginPage/> failed login displays server error\\\", ()=>{})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"describe(\\\"<LoginPage/>\\\", () => {\\n  test(\\\"Failed login displays server error\\\", ()=>{})\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"describe(\\\"<LoginPage/>\\\", () => {\\n  test(\\\"Invalid credentials displays server error\\\", ()=>{})\\n  test(\\\"Pending submission displays loader\\\", ()=>{})\\n  test(\\\"Successful login redirects to dashboard\\\", ()=>{})\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"describe(\\\"<LoginPage/>\\\", () => {\\n  describe(\\\"Failed login\\\", () => {}) \\n  describe(\\\"Invalid form\\\", () => {})\\n  describe(\\\"Successful login\\\", () => {})\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"describe(\\\"<LoginPage/>\\\", () => {\\n  describe(\\\"Failed login\\\", () => {\\n    test(\\\"Displays server error\\\", ()=>{})\\n    test(\\\"Requires captcha on subsequent attempts\\\", ()=>{})\\n    //...\\n  }) \\n  describe(\\\"Invalid form\\\", () => {})\\n  describe(\\\"Successful login\\\", () => {})\\n}) \\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Juste 1 test ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suspect\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comment faire mieux ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scoper via convention nommage\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Use naming to scope\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers subtitle=\\\"before\\\"\",\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"before\\\"\"\n  }), \"test(\\\"<LoginPage/>\\\", () => {\\n    // verify can't submit if empty form\\n    \\n    // verify email validation\\n    \\n    // Verify password validation\\n    \\n    // verify loading state\\n    \\n    // verify login fail displays error\\n    \\n    // verify login fail redirect error\\n    \\n    // more stuff\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"After\\\"\",\n    \"subtitle\": \"\\\"After\\\"\"\n  }), \"describe(\\\"<LoginPage/>\\\", () => {\\n  test(\\\"Invalid credentials displays server error\\\", ()=> {})\\n  test(\\\"Pending submission displays loader\\\", ()=> {})\\n  test(\\\"Successful login redirects to dashboard\\\", ()=> {})\\n}) \\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Part d'un test dump\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set tests concentr\\xE9s sur pb unique\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We probably surfaced more edge cases\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\\"I don't care\\\"\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au del\\xE0 difficult\\xE9 \\xE0 aborder test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Side effect = useless ci\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"<LoginPage/>\",\n    mdxType: \"TestReport\"\n  }, mdx(\"span\", {\n    style: {\n      color: \"lightgray\"\n    }\n  }, \"// Some random error\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Guess what the error is when you broke:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Validation ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redirection ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Error message ? \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yup\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"<LoginPage/> Successful login redirects to dashboard\",\n    mdxType: \"TestReport\"\n  }, mdx(\"span\", {\n    style: {\n      color: \"lightgray\"\n    }\n  }, \"// Some error that makes more sense now\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can start investigating right away\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Unicorns everywhere (\\uD83E\\uDD84\\uD83D\\uDDFA)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chaque test = licorne/r\\xE9invente la roue\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Service A\\\" showNumbers\",\n    \"subtitle\": \"\\\"Service\",\n    \"A\\\"\": true,\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = await bootDb()\\n  const validator = new IdentityValidator()\\n  const user = makeUser({ ldap: 1234 })\\n  const repository = new UserRepository(db, validator)\\n\\n  await repository.add(user)\\n\\n  expect(await db.get(\\\"users\\\").first()).toMatchObject(user)\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Service B\\\" showNumbers\",\n    \"subtitle\": \"\\\"Service\",\n    \"B\\\"\": true,\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves product to database\\\", async () => {\\n  const db = { add: jest.fn() }\\n  const validator = { allows: jest.fn() }\\n  const product = \\\"product\\\"\\n  const repository = new ProductsRepository(db, validator)\\n  validator.mockResolvedValue(true)\\n\\n  await repository.add(product)\\n\\n  expect(db.add).toHaveBeenCalledWith(\\\"products\\\", product)\\n}) \\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:4,9 subtitle=\\\"Real collaborators\\\"\",\n    \"2:4,9\": true,\n    \"subtitle\": \"\\\"Real\",\n    \"collaborators\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:4,6,10 subtitle=\\\"Mocks only\\\"\",\n    \"2:4,6,10\": true,\n    \"subtitle\": \"\\\"Mocks\",\n    \"only\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4,7,9\",\n    \"4,7,9\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4,8,10\",\n    \"4,8,10\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 tests font exactement mm chose\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prend truc, ajout, verifie ajout\\xE9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dur Contribuer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suite 10 tests chacun compl\\xE8tement diff\\xE9rent\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comment faire mieux ?\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Stick to your guns\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aka m\\xEAme type d'objet, m\\xEAme type de test\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Service A\\\" showNumbers\",\n    \"subtitle\": \"\\\"Service\",\n    \"A\\\"\": true,\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n    const db = { add: jest.fn() }\\n    const validator = { allows: jest.fn() }\\n    const user = \\\"user\\\"\\n    const repository = new ProductsRepository(db, validator)\\n    validator.mockResolvedValue(true)\\n    \\n    await repository.add(user)\\n    \\n    expect(db.add).toHaveBeenCalledWith(\\\"users\\\", user)\\n}) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Service B\\\" showNumbers\",\n    \"subtitle\": \"\\\"Service\",\n    \"B\\\"\": true,\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves product to database\\\", async () => {\\n  const db = { add: jest.fn() }\\n  const validator = { allows: jest.fn() }\\n  const product = \\\"product\\\"\\n  const repository = new ProductsRepository(db, validator)\\n  validator.mockResolvedValue(true)\\n\\n  await repository.add(product)\\n\\n  expect(db.add).toHaveBeenCalledWith(\\\"products\\\", product)\\n}) \\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Choisit strategie test et on s'y colle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ici test services via mock \"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Expressiveness \\uD83D\\uDCAF\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manque expressivit\\xE9 \")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Veut test maintenable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Travaill\\xE9 structure -> capable trouver marque rapidement/nouveau test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Next: arriver \\xE0 comprendre ce qui se passe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aka\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mettre en valeur ce qui importance dans test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cacher le reste\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trouver bon niveau de d\\xE9tail pour compr\\xE9hension rapide\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Lost in details (\\uD83D\\uDCDA\\uD83E\\uDD14)\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = render(<LoginPage />)\\n    const emailInput = page.getByLabelText(/email/i)\\n    const passwordInput = page.getByLabelText(/password/i)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    fireEvent.change(emailInput, {\\n        target: { value: credentials.email },\\n    })\\n    fireEvent.change(passwordInput, { target: { value: credentials.password } })\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:17 showNumbers\",\n    \"12:17\": true,\n    \"showNumbers\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7,12:14 showNumbers\",\n    \"7,12:14\": true,\n    \"showNumbers\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const type = (target, value, page) => {\\n  const input = page.getByLabelText(target)\\n  fireEvent.change(input, {\\n      target: { value },\\n  })\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = render(<LoginPage />)\\n    const emailInput = page.getByLabelText(/email/i)\\n    const passwordInput = page.getByLabelText(/password/i)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    fireEvent.change(emailInput, {\\n        target: { value: credentials.email },\\n    })\\n    fireEvent.change(passwordInput, { target: { value: credentials.password } })\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[30:34]\",\n    \"1[30:34]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    return {...page, type}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = render(<LoginPage />)\\n    const emailInput = page.getByLabelText(/email/i)\\n    const passwordInput = page.getByLabelText(/password/i)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    fireEvent.change(emailInput, {\\n        target: { value: credentials.email },\\n    })\\n    fireEvent.change(passwordInput, { target: { value: credentials.password } })\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    return {...page, type}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    page.type(/email/i, credentials.email )\\n    page.type(/password/i, credentials.password )\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"25\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"25\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    const submit = (target) => {\\n      const element = page.getByRole(\\\"button\\\", { name: /login/i } )\\n      fireEvent.submit(element)\\n    }\\n\\n  \\n    return {...page, type, submit}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    page.type(/email/i, credentials.email )\\n    page.type(/password/i, credentials.password )\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    const submit = (target) => {\\n      const element = page.getByRole(\\\"button\\\", { name: /login/i } )\\n      fireEvent.submit(element)\\n    }\\n\\n  \\n    return {...page, type, submit}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    page.type(/email/i, credentials.email )\\n    page.type(/password/i, credentials.password )\\n    page.submit(/login/i)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"31\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"31\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    const submit = (target) => {\\n      const element = page.getByRole(\\\"button\\\", { name: /login/i } )\\n      fireEvent.submit(element)\\n    }\\n\\n    const waitForPendingPromisesToComplete = () => new Promise(resolve => process.nextTick(resolve))\\n\\n  \\n    return {...page, type, submit, waitForPendingPromisesToComplete}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    page.type(/email/i, credentials.email )\\n    page.type(/password/i, credentials.password )\\n    page.submit(/login/i)\\n    await page.waitForPendingPromisesToComplete()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"30:33\",\n    \"30:33\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"28\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"28\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"30:31\",\n    \"30:31\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"32:33\",\n    \"32:33\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    const submit = (target) => {\\n      const element = page.getByRole(\\\"button\\\", { name: /login/i } )\\n      fireEvent.submit(element)\\n    }\\n\\n    const waitForPendingPromisesToComplete = () => new Promise(resolve => process.nextTick(resolve))\\n\\n  \\n    return {...page, type, submit, waitForPendingPromisesToComplete}\\n}\\n\\nconst renderLoginPage = () => {\\n  const page = customRender(<LoginPage />)\\n  \\n  const allowLoginFor = (credentials) => when(login(credentials)).mockResolvedValue()\\n\\n  const fillInLoginForm = (credentials) => {\\n      page.type(/email/i, credentials.email )\\n      page.type(/password/i, credentials.password )\\n  }\\n\\n  const login = async () => {\\n    page.submit(/login/i)\\n    await page.waitForPendingPromisesToComplete()\\n  }\\n\\n  return {...page, allowLoginFor, fillInLoginForm, login}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    page.type(/email/i, credentials.email )\\n    page.type(/password/i, credentials.password )\\n    page.submit(/login/i)\\n    page.waitForPendingPromisesToComplete()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const customRender = (component) => {\\n    const page = render(component)\\n\\n    const type = (target, value) => {\\n      const input = page.getByLabelText(target)\\n      fireEvent.change(input, {\\n        target: { value },\\n      })\\n    }\\n  \\n    const submit = (target) => {\\n      const element = page.getByRole(\\\"button\\\", { name: /login/i } )\\n      fireEvent.submit(element)\\n    }\\n\\n    const waitForPendingPromisesToComplete = () => new Promise(resolve => process.nextTick(resolve))\\n\\n  \\n    return {...page, type, submit, waitForPendingPromisesToComplete}\\n}\\n\\nconst renderLoginPage = () => {\\n  const page = customRender(<LoginPage />)\\n  \\n  const allowLoginFor = (credentials) => when(login(credentials)).mockResolvedValue()\\n\\n  const fillInLoginForm = (credentials) => {\\n      page.type(/email/i, credentials.email )\\n      page.type(/password/i, credentials.password )\\n  }\\n\\n  const login = async () => {\\n    page.submit(/login/i)\\n    await page.waitForPendingPromisesToComplete()\\n  }\\n\\n  return {...page, allowLoginFor, fillInLoginForm, login}\\n}\\n\\ntest(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm( credentials )\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"5 sec to tell me what this is doing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compliqu\\xE9 alors que peu de lignes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pi\\xE8ces bas niveau cachent concept global\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How can we make that better ?\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Framework is not for you\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compose low level pieces into helpers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create page/item specific helpers to match domain\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create interactor/page obejct\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What, not how\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 7:17 subtitle=\\\"Before\\\"\",\n    \"showNumbers\": true,\n    \"7:17\": true,\n    \"subtitle\": \"\\\"Before\\\"\"\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = render(<LoginPage />)\\n    const emailInput = page.getByLabelText(/email/i)\\n    const passwordInput = page.getByLabelText(/password/i)\\n    const submitButton = page.getByRole(\\\"button\\\", { name: /login/i })\\n    when(login(credentials)).mockResolvedValue()\\n    \\n    fireEvent.change(emailInput, {\\n        target: { value: credentials.email },\\n    })\\n    fireEvent.change(passwordInput, { target: { value: credentials.password } })\\n    fireEvent.submit(submitButton)\\n    await new Promise(resolve => process.nextTick(resolve))\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 6:10 subtitle=\\\"After\\\"\",\n    \"showNumbers\": true,\n    \"6:10\": true,\n    \"subtitle\": \"\\\"After\\\"\"\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = customRender(<LoginPage />)\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm( credentials )\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to understand\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Domain terms\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralized knowledge (bonus)\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Suspicious values (\\uD83D\\uDC6E\\u200D\\u2642\\uFE0F\\uD83D\\uDCE6)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Valeurs suspectes\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const count = 2\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"const date = \\\"20/03/2018\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 3:4\",\n    \"showNumbers\": true,\n    \"3:4\": true\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = renderLoginPage()\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm(credentials)\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"credentials.email\\\",\\n       password: \\\"credentials.password\\\",\\n    }\\n    const page = renderLoginPage()\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm(credentials)\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Some service test`, (  ) => {\\n    const route = WHATEVER\\n    const service = new SomeService(route)\\n\\n    service.methodThatDoesntUseRoute()\\n\\n    // ...assertions\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why 2, why not 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And why not 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Whay \\\"20/03/2018\\\" why not 21st ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Does it really have to be a valid email ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Leads to programming par superstition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If data shape doesn't matter, show it (credentials.email)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If value doesn't matter at all, show it (WHATEVER) \"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"Some service test\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToBe, {\n    actual: \"whatever\",\n    expected: true\n  })), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Some service test`, (  ) => {\\n    const route = placeholder(\\\"ROUTE_PLACEHOLDER\\\")\\n    const service = new SomeService(route)\\n\\n    service.methodThatDoesntUseRoute()\\n\\n    // ...assertions\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[19:51]\",\n    \"2[19:51]\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"Some service test\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToBe, {\n    actual: \"ROUTE_PLACEHOLDER\",\n    expected: true\n  })), mdx(\"hr\", null), mdx(\"p\", null, \"Make the unimportant obviously unimportant\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:5\",\n    \"showNumbers\": true,\n    \"2:5\": true\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"brucewayne@wayneenterprises.com\\\",\\n       password: \\\"imbatman\\\",\\n    }\\n    const page = renderLoginPage()\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm(credentials)\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:5\",\n    \"showNumbers\": true,\n    \"2:5\": true\n  }), \"test(\\\"<LoginPage/>\\\", async () => {\\n    const credentials = {\\n       email: \\\"credentials.email\\\",\\n       password: \\\"credentials.password\\\",\\n    }\\n    const page = renderLoginPage()\\n    page.allowLoginFor(credentials)\\n    \\n    page.fillInLoginForm(credentials)\\n    await page.login()\\n    \\n    expect(navigate).toHaveBeenCalledWith(\\\"/\\\")\\n})\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avant: \\\"dois passer email valide\\\", \\\"possiblement combo email/pwd\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Programmation par superstition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After: shape doesn't matter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Value shape doesn't matter for this test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If expectation on value passing, you'll get a better message (tracer object)\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Everything bold (\\uD83C\\uDF0F\\uD83D\\uDC68\\u200D\\uD83E\\uDDB2)\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  {\\n      firstname: \\\"Bruce\\\",\\n      lastname: \\\"Wayne\\\",\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      password: \\\"admmin\\\",\\n      ldap: \\\"1234\\\"\\n    }\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:7\",\n    \"2:7\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"9\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers subtitle=\\\"Factory\\\"\",\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"Factory\\\"\"\n  }), \"const makeUser = (overrides) => ({\\n    firstname: \\\"user.firstname\\\",\\n    lastname: \\\"user.lastname\\\",\\n    email: \\\"user.email\\\",\\n    password: \\\"user.password\\\",\\n    ldap: \\\"user.ldap\\\",\\n  ...overrides\\n})\\n\\ntest(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  {\\n      firstname: \\\"Bruce\\\",\\n      lastname: \\\"Wayne\\\",\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      password: \\\"admmin\\\",\\n      ldap: \\\"1234\\\"\\n    }\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 11:14\",\n    \"showNumbers\": true,\n    \"11:14\": true\n  }), \"const makeUser = (overrides) => ({\\n    firstname: \\\"user.firstname\\\",\\n    lastname: \\\"user.lastname\\\",\\n    email: \\\"user.email\\\",\\n    password: \\\"user.password\\\",\\n    ldap: \\\"user.ldap\\\",\\n  ...overrides\\n})\\n\\ntest(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  makeUser({\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      ldap: \\\"1234\\\"\\n    })\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:13\",\n    \"12:13\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers subtitle=\\\"Named factory\\\"\",\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"Named\",\n    \"factory\\\"\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  makeUser.approvedByIdentity()\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What in this user makes this test pass/fail\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I see a validator, so there's probably something going on\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I should be able to tell what\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How can we make that more obvious\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Highlight what matters\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:8\",\n    \"showNumbers\": true,\n    \"2:8\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  {\\n      firstname: \\\"Bruce\\\",\\n      lastname: \\\"Wayne\\\",\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      password: \\\"admmin\\\",\\n      ldap: \\\"1234\\\"\\n    }\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:5\",\n    \"showNumbers\": true,\n    \"2:5\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  makeUser({\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      ldap: \\\"1234\\\"\\n    })\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Duplicate naming (\\uD83D\\uDC76\\uD83D\\uDC76)\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"// Calls do something\\ndoSomething()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:5\",\n    \"showNumbers\": true,\n    \"2:5\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const user =  makeUser({\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      ldap: \\\"1234\\\"\\n    })\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2:5\",\n    \"showNumbers\": true,\n    \"2:5\": true\n  }), \"test(\\\"Valiation success adds user to repository\\\", () => {\\n    const identityApprovedUser =  makeUser({\\n      email: \\\"brucewayne@wayneenterprises.com\\\",\\n      ldap: \\\"1234\\\"\\n    })\\n    const validator = new IdentityValidator()\\n    const repository = new UserRepository(validator) \\n\\n    repository.add(user)\\n\\n    expect(repository.all().first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"Matching user in db returns match\\\", async () => {\\n    const user1 =  makeUser({\\n      ldap: \\\"user_1_ldap\\\"\\n    })\\n    const user2 = makeUser({\\n      ldap: \\\"user_2_ldap\\\"\\n    })  \\n    const db = new Db()\\n    const repository = new UserRepository() \\n\\n    db.add(\\\"users\\\", user1)\\n    db.add(\\\"users\\\", user2)\\n\\n    const found = await repository.get({ldap: user1.ldap})\\n\\n    expect(found).toMatchObject(user1)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:7\",\n    \"2:7\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2[11:23],5[11:25],16\",\n    \"showNumbers\": true,\n    \"2[11:23],5[11:25],16\": true\n  }), \"test(\\\"Matching user in db returns match\\\", async () => {\\n    const matchingUser =  makeUser({\\n      ldap: \\\"user_1_ldap\\\"\\n    })\\n    const nonMatchingUser = makeUser({\\n      ldap: \\\"user_2_ldap\\\"\\n    })  \\n    const db = new Db()\\n    const repository = new UserRepository() \\n\\n    db.add(\\\"users\\\", matchingUser)\\n    db.add(\\\"users\\\", nonMatchingUser)\\n\\n    const found = await repository.get({ldap: user1.ldap})\\n\\n    expect(found).toMatchObject(matchingUser)\\n})\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Put naming to work\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2[11:16],5[11:16],16\",\n    \"showNumbers\": true,\n    \"2[11:16],5[11:16],16\": true\n  }), \"test(\\\"Matching user in db returns match\\\", async () => {\\n    const user1 =  makeUser({\\n      ldap: \\\"user_1_ldap\\\"\\n    })\\n    const user2 = makeUser({\\n      ldap: \\\"user_2_ldap\\\"\\n    })  \\n    const db = new Db()\\n    const repository = new UserRepository() \\n\\n    db.add(\\\"users\\\", user1)\\n    db.add(\\\"users\\\", user2)\\n\\n    const found = await repository.get({ldap: user1.ldap})\\n\\n    expect(found).toMatchObject(user1)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 2[11:23],5[11:25],16\",\n    \"showNumbers\": true,\n    \"2[11:23],5[11:25],16\": true\n  }), \"test(\\\"Matching user in db returns match\\\", async () => {\\n    const matchingUser =  makeUser({\\n      ldap: \\\"user_1_ldap\\\"\\n    })\\n    const nonMatchingUser = makeUser({\\n      ldap: \\\"user_2_ldap\\\"\\n    })  \\n    const db = new Db()\\n    const repository = new UserRepository() \\n\\n    db.add(\\\"users\\\", matchingUser)\\n    db.add(\\\"users\\\", nonMatchingUser)\\n\\n    const found = await repository.get({ldap: user1.ldap})\\n\\n    expect(found).toMatchObject(matchingUser)\\n})\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Mystery guest (\\uD83D\\uDC7B\\uD83C\\uDF81)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"L'invit\\xE9 myst\\xE8re\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Returns first item in table`, async () => {\\n  const db = await bootDb()\\n  const usersTable = Table.from(db.get(\\\"users\\\"))\\n\\n  expect(usersTable.first().name).toBe(\\\"John\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[40:45]\",\n    \"5[40:45]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// fixtures/db/users.json\\n[\\n  {\\n    name: \\\"John\\\"\\n    // ...other props\\n  },\\n  // ...other users \\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Returns first item in table`, async () => {\\n  const firstUser = makeUser({name: \\\"first_user\\\"})\\n  const secondUser = makeUser({name: \\\"second_user\\\"})\\n  const usersDb = (await bootDb()).get(\\\"users\\\")\\n  const usersTable = Table.from(usersDb)\\n\\n  db.add(firstUser)\\n  db.add(secondUser)\\n  const result = usersTable.first()\\n\\n  expect(result.name).toBe(firstUser.name)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:3\",\n    \"2:3\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:8\",\n    \"7:8\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11[10:21,28:41]\",\n    \"11[10:21,28:41]\": true\n  }), \"\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check r\\xE9cup\\xE8re premier item dans table\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The fuck did john come from ?!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Qq'un forcement changer propri\\xE9t\\xE9 et tout casser\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cas ou mutation fixtures dans appli legacy -> 3 jours debug\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assume DB starts empty + reset\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On sait ou vient nom\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"controle donn\\xE9e\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Control your data\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Returns first item in table`, async () => {\\n  const db = await bootDb()\\n  const usersTable = Table.from(db.get(\\\"users\\\"))\\n\\n  expect(usersTable.first().name).toBe(\\\"John\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Returns first item in table`, async () => {\\n  const firstUser = makeUser({name: \\\"first_user\\\"})\\n  const secondUser = makeUser({name: \\\"second_user\\\"})\\n  const usersDb = (await bootDb()).get(\\\"users\\\")\\n  const usersTable = Table.from(usersDb)\\n\\n  db.add(firstUser)\\n  db.add(secondUser)\\n  const result = usersTable.first()\\n\\n  expect(result.name).toBe(firstUser.name)\\n})\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:11\",\n    \"2:11\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[40:46]\",\n    \"5[40:46]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,11[28:42]\",\n    \"2,11[28:42]\": true\n  }), \"\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plus long\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mais pas risque intervention divine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controle mes donn\\xE9es\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Peut tracer d'ou vient valeur attendue\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Feedback \\uD83D\\uDC4C \"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When fail, in ci/during refactor \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't want to waste time understanding failure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Failure should be expressive enough to tell you clearly what was expected and what happened\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Otherwise, time lost \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Like undefined is not a function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"True, but I still have no clue what the problem is\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Failures should give you clues, breadcrumbs on the path to solving a bug\\nsee justin searls\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Not a number (\\uD83C\\uDFB0)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ever had that error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not quite useful right \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Like undefined is not a function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"True, but I still have no clue what the problem is\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"chars() returns every char in string\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToBe, {\n    actual: 5,\n    expected: 0\n  })), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 3\",\n    \"showNumbers\": true\n  }), \"test(\\\"chars() returns every char in string\\\", () => {\\n  // ...stuff\\n  expect(chars(string).length).toBe(5)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 3\",\n    \"showNumbers\": true\n  }), \"test(\\\"chars() returns every char in string\\\", () => {\\n  // ...stuff\\n  expect(chars(string)).toHaveLength(5)\\n})\\n\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"chars() returns every char in string\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToHaveLength, {\n    actual: 0,\n    expected: 10,\n    passed: []\n  })), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"Cannot re-submit form until post completion\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToBe, {\n    actual: false,\n    expected: true\n  })), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 3\",\n    \"showNumbers\": true\n  }), \"test(\\\"Cannot re-submit form until post completion\\\", () => {\\n  // ...stuff\\n  expect(button.disabled).toBe(true)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 3\",\n    \"showNumbers\": true\n  }), \"test(\\\"Cannot re-submit form until post completion\\\", () => {\\n  // ...stuff\\n  expect(button).toBeDisabled()\\n})\\n\"))), mdx(\"hr\", null), mdx(TestReport, {\n    name: \"Cannot re-submit form until post completion\",\n    mdxType: \"TestReport\"\n  }, mdx(Matchers.ToBeDisabled, null)), mdx(\"hr\", null), mdx(\"p\", null, \"Leverage matchers\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"chars() returns every char in string\\\"\\n        \\n         Error: expected( 0 ).toBe( 5 ) \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"chars() returns every char in string\\\"\\n        \\n         Error: expect(received).toHaveLength(expected)\\n         \\n         Expected length: 10\\n         Received length: 0\\n         Received array:  []\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Memory dump (\\uD83E\\uDDE0\\uD83D\\uDDD1)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Returns users sorted by id descending\\\"\\n        Error: expect(received).toEqual(expected) // deep equality\\n        \\n        - Expected\\n        + Received\\n        \\n        @@ -4,11 +4,11 @@\\n                \\\"city\\\": \\\"user.address.city\\\",\\n                \\\"street\\\": \\\"user.address.city\\\",\\n              },\\n              \\\"birthdate\\\": \\\"user.birthdate\\\",\\n              \\\"firstname\\\": \\\"user.firstname\\\",\\n        -     \\\"id\\\": 3,\\n        +     \\\"id\\\": 1,\\n              \\\"lastname\\\": \\\"user.lastname\\\",\\n            },\\n            Object {\\n              \\\"address\\\": Object {\\n                \\\"city\\\": \\\"user.address.city\\\",\\n        @@ -24,9 +24,9 @@\\n                \\\"city\\\": \\\"user.address.city\\\",\\n                \\\"street\\\": \\\"user.address.city\\\",\\n              },\\n              \\\"birthdate\\\": \\\"user.birthdate\\\",\\n              \\\"firstname\\\": \\\"user.firstname\\\",\\n        -     \\\"id\\\": 1,\\n        +     \\\"id\\\": 3,\\n              \\\"lastname\\\": \\\"user.lastname\\\",\\n            },\\n          ]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Orders users by id descending`, () => {\\n  // ...stuff\\n\\n  const result = orderUsers(users)\\n\\n  expect(result).toEqual([user3, user2, user1])\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Orders users by id descending`, () => {\\n  // ...stuff\\n\\n  const result = orderUsers(users).map(prop(\\\"id\\\"))\\n  \\n  expect(result).toEqual([3, 2, 1])\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4[35:51],6[26:35]\",\n    \"4[35:51],6[26:35]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Returns users sorted by id descending\\\"\\n        Error: expect(received).toEqual(expected) // deep equality\\n        \\n        - Expected\\n        + Received\\n        \\n          Array [\\n        -   3,\\n        -   2,\\n            1,\\n        +   2,\\n        +   3,\\n          ]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Gets user by id\\\"\\n        Error: expect(received).toBe(expected) // Object.is equality\\n        \\n        - Expected\\n        + Received\\n        \\n        @@ -2,9 +2,9 @@\\n            \\\"address\\\": Object {\\n              \\\"city\\\": \\\"user.address.city\\\",\\n              \\\"street\\\": \\\"user.address.city\\\",\\n            },\\n            \\\"birthdate\\\": \\\"user.birthdate\\\",\\n        -   \\\"firstname\\\": \\\"John\\\",\\n        -   \\\"id\\\": 2,\\n        +   \\\"firstname\\\": \\\"Bob\\\",\\n        +   \\\"id\\\": 1,\\n            \\\"lastname\\\": \\\"user.lastname\\\",\\n          }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"test(`Gets user by id`, async () => {\\n    // ...stuff\\n\\n    const result = await repository.get(user2.id)\\n\\n    expect(result).toBe(user2)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"test(`Gets user by id`, async () => {\\n    // ...stuff\\n\\n    const result = await repository.get(user2.id)\\n\\n    expect(result.firstname).toBe(user2.firstname)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Gets user by id\\\"\\n        Error: expect(received).toBe(expected) // Object.is equality\\n        \\n        Expected: \\\"John\\\"\\n        Received: \\\"Bob\\\"\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\uD83D\\uDC43: Trace fail (\\uD83D\\uDDFA\\uD83D\\uDE22)\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You just want to test delegaton\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"That something has been passed to something else\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Saves user to database\\\"\\n        Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\\n        \\n        Expected: {\\\"address\\\": {\\\"city\\\": \\\"address.city\\\", \\\"street\\\": \\\"address.city\\\"}, \\\"birthdate\\\": \\\"birthdate\\\", \\\"firstname\\\": \\\"firstname\\\", \\\"lastname\\\": \\\"lastname\\\"}\\n        Received: undefined\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,6,8\",\n    \"2,6,8\": true\n  }), \"test(`Saves user in database c`, async () => {\\n    const user = withDescription(makeUser(), \\\"user\\\")\\n    const db = { add: jest.fn() }\\n    const repository = new UserRepository(db)\\n    \\n    await repository.create(user)\\n    \\n    expect(db.add).toHaveBeenCalledWith(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"test(`Saves user in database c`, async () => {\\n    const user = \\\"user\\\"\\n    const db = { add: jest.fn() }\\n    const repository = new UserRepository(db)\\n    \\n    await repository.create(user)\\n    \\n    expect(db.add).toHaveBeenCalledWith(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Saves user to database\\\"\\n        Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\\n        \\n        Expected: \\\"user\\\"\\n        Received: undefined\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Use placeholders\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Saves user to database\\\"\\n        Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\\n        \\n        Expected: {\\\"address\\\": {\\\"city\\\": \\\"address.city\\\", \\\"street\\\": \\\"address.city\\\"}, \\\"birthdate\\\": \\\"birthdate\\\", \\\"firstname\\\": \\\"firstname\\\", \\\"lastname\\\": \\\"lastname\\\"}\\n        Received: undefined\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\uD83D\\uDED1 Fail: \\\"Saves user to database\\\"\\n        Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\\n        \\n        Expected: \\\"user\\\"\\n        Received: undefined\\n\")))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Flexibility\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83E\\uDD38\\u200D\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"make test xp easy\\ntests shouldn't break unless behavior changed\\ntests shouldn't break because a collaborator broke only break for relevant reasons\\nshouldn't feel like dying because you're adding one param to the constructor and have to update 15 tests\\nshouldn't break because another part of the spec for this method has changed (objectMatchig)\")), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"The creep\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83D\\uDD0E\\uD83D\\uDE0F\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Switches to loading state on data fetch`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  const instance = page.getComponentInstance()\\n    \\n  instance._getData()\\n\\n  expect(instance.loading).toBe(true)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[12:19]\",\n    \"5[12:19]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Switches to loading state on data fetch`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  \\n  page.click(/refresh/i)\\n\\n  expect(instance.loading).toBe(true)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Switches to loading state on data fetch`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  \\n  page.click(/refresh/i)\\n\\n  expect(page).toHaveText(\\\"Loading...\\\")\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Displays a loader on page refresh`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  \\n  page.click(/refresh/i)\\n\\n  expect(page).toHaveText(\\\"Loading...\\\")\\n})\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checks state loading once started fetching page data\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is a view but\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assertion on internal state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Via private method \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragile: Will break on refactor of state/method\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not what we care about (aka showing a loader)\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test via public api, here, view\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rename test\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Test it the way you'll use it\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Switches to loading state on data fetch`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  const instance = page.getComponentInstance()\\n    \\n  instance._getData()\\n\\n  expect(instance.loading).toBe(true)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Displays a loader on page refresh`, ( ) => {\\n  const page = createComponent(SomePageComponent)\\n  \\n  page.click(/refresh/i)\\n\\n  expect(page).toHaveText(\\\"Loading...\\\")\\n})\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3[25:44],5[12:19],7[10:25]\",\n    \"3[25:44],5[12:19],7[10:25]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4[8:12],6[16:25]\",\n    \"4[8:12],6[16:25]\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[7:45]\",\n    \"1[7:45]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[7:39]\",\n    \"1[7:39]\": true\n  }), \"\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Language totally different (instance, getData vs click, hasText)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protected from refactor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Actually tests what matters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test name matches spec\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Overspecified\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83D\\uDCDA\\uD83D\\uDE13\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Merges all errors under \\\"error\\\" key`, () => {\\n  const validationSchema = {\\n    email: Validators.email(),\\n  } \\n  const validate = Validator.from(validationSchema)\\n\\n  const report = validate({email: \\\"invalid_email\\\"})\\n  \\n  expect(report).toEqual({\\n    errors: {\\n      email: `\\\"Invalid email\\\" is not a valid email`\\n    }, \\n    count: 1\\n  })\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:14\",\n    \"9:14\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11[14:52]\",\n    \"11[14:52]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Merges all errors under \\\"error\\\" key`, () => {\\n  const validationSchema = {\\n    email: Validators.email(),\\n  } \\n  const validate = Validator.from(validationSchema)\\n\\n  const report = validate({email: \\\"invalid_email\\\"})\\n  \\n  expect(report).toEqual({\\n    errors: {\\n      email: expect.any(String)\\n    }, \\n    count: 1\\n  })\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"13\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"9:13\",\n    \"9:13\": true\n  }), \"test(`Merges all errors under \\\"error\\\" key`, () => {\\n  const validationSchema = {\\n    email: Validators.email(),\\n  } \\n  const validate = Validator.from(validationSchema)\\n\\n  const report = validate({email: \\\"invalid_email\\\"})\\n  \\n  expect(report).toMatchObject({\\n    errors: {\\n      email: expect.any(String)\\n    }\\n  })\\n})\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Verifies validation report matches expectations\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only care about shape of error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yet assertion on everything\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What if new key in report/rename count to total\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Breaks for unrelated reasons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depends on email validation msg\")), mdx(\"br\", null), mdx(\"p\", null, \"comment faire mieux\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't depend on external obj behavior (email)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only assert on part that matters, ignore the rest\")), mdx(\"p\", null, \"nom refactor\\nB/A\")), mdx(\"hr\", null), mdx(\"p\", null, \"Assert only on what matters to the test\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Merges all errors under \\\"error\\\" key`, () => {\\n  const validationSchema = {\\n    email: Validators.email(),\\n  } \\n  const validate = Validator.from(validationSchema)\\n\\n  const report = validate({email: \\\"invalid_email\\\"})\\n  \\n  expect(report).toEqual({\\n    errors: {\\n      email: `\\\"Invalid email\\\" is not a valid email`\\n    }, \\n    count: 1\\n  })\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(`Merges all errors under \\\"error\\\" key`, () => {\\n  const validationSchema = {\\n    email: Validators.email(),\\n  } \\n  const validate = Validator.from(validationSchema)\\n\\n  const report = validate({email: \\\"invalid_email\\\"})\\n  \\n  expect(report).toMatchObject({\\n    errors: {\\n      email: expect.any(String)\\n    }\\n  })\\n})\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9[18:32],10:13\",\n    \"9[18:32],10:13\": true\n  }), \"\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pr\\xE9cis\\xE9 assertions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enlev\\xE9 d\\xE9pendance comportement email\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Peut changer forme report sans risque\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attention matcher permissif, si vous attendiez cl\\xE9\"))), mdx(\"hr\", null), mdx(EmojiSlide, {\n    caption: \"Redundant coverage\",\n    mdxType: \"EmojiSlide\"\n  }, \"\\uD83D\\uDE48\\uD83D\\uDE48\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = await bootDb()\\n  const validator = new IdentityValidator()\\n  const user = makeUser({ ldap: 1234 })\\n  const repository = new UserRepository(db, validator)\\n\\n  await repository.add(user)\\n\\n  expect(await db.get(\\\"users\\\").first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:4\",\n    \"2:4\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = await bootDb()\\n  const validator = { allows: jest.fn() }\\n  const user = makeUser({ ldap: 1234 })\\n  const repository = new UserRepository(db, validator)\\n  when(validator.allows(user)).resolve(true)\\n  \\n  await repository.add(user)\\n\\n  expect(await db.get(\\\"users\\\").first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = await bootDb()\\n  const validator = { allows: jest.fn() }\\n  const user = \\\"user\\\"\\n  const repository = new UserRepository(db, validator)\\n  when(validator.allows(user)).resolve(true)\\n  \\n  await repository.add(user)\\n\\n  expect(await db.get(\\\"users\\\").first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = { add: jest.fn() }\\n  const validator = { allows: jest.fn() }\\n  const user = \\\"user\\\"\\n  const repository = new UserRepository(db, validator)\\n  when(validator.allows(user)).resolve(true)\\n  \\n  await repository.add(user)\\n\\n  expect(db.add).toHaveBeenCalledWith(\\\"users\\\", user)\\n})\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checks valid user added to db\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"D\\xE9pend des r\\xE8gles validation identity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Probablement d'un lien db avec le ldap et l'ident\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Breaks if identity changes\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cr\\xE9ation frontiere/s\\xE9paration interieur/exterieur (collabs)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mock validator\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove dependency on user\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove dependency on db\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Enforce boundaries\"), mdx(\"hr\", null), mdx(CodeSurferColumns, _extends({}, splitCodeSampleProps, {\n    mdxType: \"CodeSurferColumns\"\n  }), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = await bootDb()\\n  const validator = new IdentityValidator()\\n  const user = makeUser({ ldap: 1234 })\\n  const repository = new UserRepository(db, validator)\\n\\n  await repository.add(user)\\n\\n  expect(await db.get(\\\"users\\\").first()).toMatchObject(user)\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"test(\\\"add() validation passed saves user to database\\\", async () => {\\n  const db = { add: jest.fn() }\\n  const validator = { allows: jest.fn() }\\n  const user = \\\"user\\\"\\n  const repository = new UserRepository(db, validator)\\n  when(validator.allows(user)).resolve(true)\\n  \\n  await repository.add(user)\\n\\n  expect(db.add).toHaveBeenCalledWith(\\\"users\\\", user)\\n})\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,3,4\",\n    \"2,3,4\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,3,4\",\n    \"2,3,4\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impos\\xE9 limites\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clair que si bug c'est pas dans les collabs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Small debug area\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controle collabs, pas besoin trouver ldap invalide\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plus compliqu\\xE9 \\xE0 mairiser\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"36542163-dbc6-5a4f-9866-0327a2965f87","slug":"","title":"Readable tests"}}}